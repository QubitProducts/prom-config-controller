/*
Copyright 2018 The Kubernetes sample-controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/QubitProducts/prom-config-controller/pkg/apis/config/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScrapeLister helps list Scrapes.
type ScrapeLister interface {
	// List lists all Scrapes in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.Scrape, err error)
	// Scrapes returns an object that can list and get Scrapes.
	Scrapes(namespace string) ScrapeNamespaceLister
	ScrapeListerExpansion
}

// scrapeLister implements the ScrapeLister interface.
type scrapeLister struct {
	indexer cache.Indexer
}

// NewScrapeLister returns a new ScrapeLister.
func NewScrapeLister(indexer cache.Indexer) ScrapeLister {
	return &scrapeLister{indexer: indexer}
}

// List lists all Scrapes in the indexer.
func (s *scrapeLister) List(selector labels.Selector) (ret []*v1beta1.Scrape, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Scrape))
	})
	return ret, err
}

// Scrapes returns an object that can list and get Scrapes.
func (s *scrapeLister) Scrapes(namespace string) ScrapeNamespaceLister {
	return scrapeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScrapeNamespaceLister helps list and get Scrapes.
type ScrapeNamespaceLister interface {
	// List lists all Scrapes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.Scrape, err error)
	// Get retrieves the Scrape from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.Scrape, error)
	ScrapeNamespaceListerExpansion
}

// scrapeNamespaceLister implements the ScrapeNamespaceLister
// interface.
type scrapeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Scrapes in the indexer for a given namespace.
func (s scrapeNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Scrape, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Scrape))
	})
	return ret, err
}

// Get retrieves the Scrape from the indexer for a given namespace and name.
func (s scrapeNamespaceLister) Get(name string) (*v1beta1.Scrape, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("scrape"), name)
	}
	return obj.(*v1beta1.Scrape), nil
}
